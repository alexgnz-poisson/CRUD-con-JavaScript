CRUD es Create, Read , Update and Delete 

AJAX Asyncronus JavaScript and XML 

const http = new XMLHttpRequest(); Se requiere esto para empezar

Para poder usar codigo html en js necesitamos usar backtips

Promise se usa para poder ejecutar funciones de una manera asincrona, eso quiere decir que no tenemos
que esperar a obtener el resultado para seguir ejecutando nuestro programa. 
Las promesas pueden tener ciertos tipos de estado 
Pendiente = estado inicial, no cumplida o rechazada
Cumplida = significa que la operacion se complet satisfactoriamente
Rechazada = significaque la operacion fallo 

Fetch API 
La API Fetch proporciona una interfaz JavaScript para acceder y manipular partes del canal HTTP, tales como peticiones y respuestas.

En js al importar se hace de la siguiente manera

    <script type ="module" src="../controllers/client.controller.js">
Muy importante el tpye = "module"


EVENT LOOP O Bucle de Eventos 
En informática, el bucle de eventos es una construcción de programación o patrón de diseño que espera y envía eventos o mensajes en un 
programa. El ciclo de eventos funciona haciendo una solicitud a algún "proveedor de eventos" interno o externo, luego llama al controlador 
de eventos relevante

En el registrar cliente se agrego un script para poder generar id diferentes 
uuid.v4()
Y se agrego asi 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js" integrity="sha512-UNM1njAgOFUa74Z0bADwAq8gbTcqZC8Ej4xPSzpnh0l6KMevwvkBvbldF9uR++qKeJ+MOZHRjV1HZjoRvjDfNQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>



Utilizando promise podemos organizar nuestro código de forma estructural facilitando su lectura y mantenimiento.

Después de estudiar sobre JavaScript runtime, María decidió hacer algunos ejercicios para fijar su aprendizaje. Ella encontró el siguiente código:

console.log('1');
setTimeout(() => console.log('2'), 1000);
console.log('3')

1

3

2

setTimeOut() es una instrucción de WebApi, por eso es mandado para la callback queue y es ejecutado después de los dos 
console.log, que son ejecutados primero ya que son comandos nativos de lenguaje.

Borrando Clientes 
En su startup María lidia con varios datos de diferentes clientes. Actualmente, para borrar algún cliente de su lista 
ella necesita acceder a su servidor. ¿Cuál de las funciones abajo posibilita la comunicación con el servidor, para que 
posteriormente podamos borrar un cliente directamente por su sitio?

export const borrarCliente = (id) => {
    return fetch(`http://localhost:3000/profile/${id}`, {
        method: "DELETE",
    })
}
además de indicar la acción pasando el verbo http DELETE, también necesitamos para un id que será utilizado para 
identificar cada uno de los clientes.

GET y POST 

El POST, a diferencia del GET, envía los parámetros en el cuerpo de la solicitud HTTP.

Acceso id

Para editar un cliente específico de su petshop, María necesita tener acceso al id de cada uno de ellos. ¿Cuál 
código abajo ella utilizará para realizar esa tarea?

const agarrarURL = new URL( window.location )
const id = agarrarURL.searchParams.get(‘id’)

Creamos un nuevo objeto URL que será capaz de decirnos cuál dirección de la página estamos. Por medio de la propiedad 
searchParams podemos acceder al método get y seleccionar el id que vemos en la url.



Refactorizacion
María tiene un código en su aplicación que exhibe el nombre de todas las personas registradas en el sistema de la startup 
en la cual trabaja.

const render = () => { 
    clienteService.listaClientes()
        .then(data => {
            data.forEach(elemento => {
            tabla.appendChild(creaNuevaLinea(elemento.nombre, elemento.correo, elemento.id))
        })
    })
}
Ahora ella quiere agregar una nueva funcionalidad en su aplicación, pero antes de empezar con esta tarea ella percibe 
una chance de refactorizar el código.

¿Cuál opción de refactorización con uso de async/await y try/catch?

const render = async () =>  {
    try {
        const listaClientes = await clienteService.listaClientes()
        listaClientes.forEach(elemento => {
            tabla.appendChild(creaNuevaLinea(elemento.nombre,elemento.correo, elemento.id))
        })
    }
    catch(error){
        console.log(error)
        window.location.href="../telas/error.html"
    }
}

Utilizando async/await tenemos una función asíncrona que podemos leer de forma estructural, lo que nos trae beneficios 
de mantenimiento y legibilidad para nuestro código. Y el uso de try/catch nos ayuda a lidiar con los errores.